[{"content":"本文基于Stack版本3.31.0\n从Neopost到Stack 我觉得对于像我这样的代码白痴，一开始装修博客就去选冷门主题真的是走弯路了。用Neopost主题的时候遇到很多问题用搜索引擎都搜不到可以抄作业的答案，只能一个劲问ai然后一遍一遍试错……\n虽然看到博客一点一点有个样子了也比较有满足感，但是太折磨了，思来想去还是换了更多人用教程也更全的Stack主题。\n在此感谢： 莱特雷-Hugo Stack主题自定义更改 ； 树响集-Stack主题调整 ； 第三夏尔-Hugo Stack博客主题装修 ； Naive Koala-Hugo Stack 魔改美化 顺便截图纪念一下用Neopost主题时候的样子吧。展开图片 从默认字体到猫啃糖圆 没啥好说的，星屑同款字体，圆体的神,\n附上字体网站链接 背景图和头像 因为还是很喜欢原来做的像素动图风格，本打算沿用，但在Pintrest找了一晚上素材都没有找到很满意的背景图\n自己画了一下草图，先凑合用着吧（画不画完还是未知数）\n画不来像素风所以整个风格都改了\u0026gt; \u0026lt; 画布开得尽可能大了，姑且应用到网页上看看会多么影响加载速度（\n切换与旋转效果 按照教程 添加了头像旋转效果，并加了浅色/暗色模式切换头像和背景图的功能，效果不错（就是图太草了）\n以下是我魔改的代码：\n暗色模式下头像旋转（主题目录\\assets\\scss\\custom.scss）\r1 2 3 4 5 6 7 8 // 头像旋转动画 [data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; // 旋转时间 } [data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); // 旋转角度为360度 } 切换背景图片（主题目录\\layouts\\partials\\footer\\custom.html）\r1 2 3 4 5 6 7 8 9 10 11 /*修改背景图片*/ [data-scheme=\u0026#34;light\u0026#34;] body { background: url({{ (resources.Get \u0026#34;background/light.jpg\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; } [data-scheme=\u0026#34;dark\u0026#34;] body { background: url({{ (resources.Get \u0026#34;background/dark.jpg\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; } 切换头像\r先修改主题目录\\layouts\\partials\\head\\custom.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;script\u0026gt; // 头像切换功能 function updateAvatar() { const avatarImg = document.querySelector(\u0026#39;.site-avatar .site-logo\u0026#39;); if (!avatarImg) return; const isDark = document.documentElement.getAttribute(\u0026#39;data-scheme\u0026#39;) === \u0026#39;dark\u0026#39;; const lightSrc = avatarImg.getAttribute(\u0026#39;data-src-light\u0026#39;) || avatarImg.src; const darkSrc = avatarImg.getAttribute(\u0026#39;data-src-dark\u0026#39;); if (darkSrc \u0026amp;\u0026amp; isDark) { avatarImg.src = darkSrc; } else if (lightSrc \u0026amp;\u0026amp; !isDark) { avatarImg.src = lightSrc; } } // 初始化 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, updateAvatar); // 监听主题切换 new MutationObserver(function(mutations) { mutations.forEach(function(mutation) { if (mutation.attributeName === \u0026#39;data-scheme\u0026#39;) { setTimeout(updateAvatar, 50); } }); }).observe(document.documentElement, { attributes: true }); \u0026lt;/script\u0026gt; 再修改主题目录\\layouts\\partials\\sidebar\\left.html（在\u0026lt;header\u0026gt;后修改，注释掉原有设置）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;header\u0026gt; {{ with .Site.Params.sidebar.avatar }} {{ if (default true .enabled) }} \u0026lt;figure class=\u0026#34;site-avatar\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ .Site.BaseURL | relLangURL }}\u0026#34;\u0026gt; {{ if not .local }} \u0026lt;img src=\u0026#34;{{ .src }}\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;300\u0026#34; class=\u0026#34;site-logo\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34; {{ with .srcDark }}data-src-dark=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{ else }} {{ $avatar := resources.Get (.src) }} {{ $avatarDark := resources.Get (.srcDark | default .src) }} {{ if and $avatar $avatarDark }} {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} {{ $avatarDarkResized := $avatarDark.Resize \u0026#34;300x\u0026#34; }} \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; data-src-light=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; data-src-dark=\u0026#34;{{ $avatarDarkResized.RelPermalink }}\u0026#34; width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; class=\u0026#34;site-logo\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34;\u0026gt; {{ else if $avatar }} {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; class=\u0026#34;site-logo\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34;\u0026gt; {{ else }} {{ errorf \u0026#34;Failed loading avatar from %q\u0026#34; . }} {{ end }} {{ end }} \u0026lt;/a\u0026gt; {{ with $.Site.Params.sidebar.emoji }} \u0026lt;span class=\u0026#34;emoji\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; {{ end }} {{ end }} 再在hugo.yaml的sidebar里面添加srcdark: img/dark.jpg\n1 2 3 4 5 6 7 8 sidebar: emoji: 😨 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. avatar: enabled: true local: true src: img/light.jpg srcdark: img/dark.jpg 顺说目前的回顶部按钮和鼠标光标是用neopost主题的时候自己画的，我很满意^ ^\n不过考虑到风格不匹配大概还要重画一个……\n更换头像下图标链接 苦于没找到合适的图标素材，自己摸索了一个可以制作出完美适配主题下其他现有图标的办法\n先看我做好的图标： （这样看起来两个线条粗细不太一致，我也没找到原因，但没关系，最终显示效果是差不多的就行……如果有谁知道为什么，请务必告诉我）\n如果有同款需要，可以直接右键上面的图标另存^ ^\n寻找svg素材 这里有一个很全的资源网站：维基共享资源 搜索你需要的logo，比如“bluesky”，选择图像-文件类型-svg，选择合适的logo并在下载时选择full resolution，这样我们就能得到一张初始的svg文件：\n展开图像\r编辑svg文件 使用编辑工具对svg文件进行编辑，这里我用的是一个免费的在线svg编辑工具（需要注册） 主要需要做的是先把view box调到24x24像素，再把图像调整到view box范围内，四周适当留出2px左右的空白（视具体图像而定），之后就可以保存了\n展开图像 把保存的svg文件在VScode里打开，默认会显示图像预览，需要在右上角找到作为源文本重新打开按钮，查看源文本\n为了跟主题原有的图标协调，这里我同时打开了主题目录\\assets\\icons\\brand-twitter.svg的源文本进行比对：\nbrand-twitter.svg\r1 2 3 4 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-twitter\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; \u0026lt;path d=\u0026#34;M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; 可以直接复制前面两行代码粘贴到正在修改的svg文件中：\n未编辑的svg文件源文本\r1 2 3 4 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;svg width=\u0026#34;24px\u0026#34; height=\u0026#34;24px\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; fill=\u0026#34;#000\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; 注意删除正在修改的文件\u0026lt;path\u0026gt;末尾的样式（如style=\u0026quot;\u0026quot;、fill=\u0026quot;\u0026quot;、stroke=\u0026quot;\u0026quot;等等，总之只保留前面一连串看不懂的数字）\n编辑后的源文本\r1 2 3 4 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-bluesky\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; 这样一个适配主题的svg图标就做好了。\n应用到主页 把做好的文件放到主题目录\\assets\\icons\\中，并在hugo/yaml里修改menu-social-icon的设置（与文件的标题一致），这样就可以应用到博客页面上了\n如果需要更改图标链接的顺序，在params:前面一行添加weight: 数字即可，数字越小则越前\n","date":"2025-10-01T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E4%BD%A0%E5%A5%BDstack%E4%B8%BB%E9%A2%98/","title":"你好，Stack主题"},{"content":"对照Brackeys的教程做的个人学习笔记\n本来写在星屑页面上，但觉得搭个博客来写会更好阅读一些，于是就搭了这个博客（？饺子醋）\nYouTube的Brackeys频道 B站搬运熟肉 Hello, World！ func _ready()\n节点第一次进入场景时会调用此函数。可以在此放置需要游戏运行时立刻执行的代码。 pass\n意味着什么都不做，出现在尚未填写的函数中 print(\u0026quot;Hello, World!\u0026quot;)\n控制台会打印输入的信息\ngdscript使用tab缩进来确定代码的结构，并对大小写敏感\nModifying nodes 1.0 调整字体大小：右侧栏-control-theme overrides-font sizes\n通过脚本来编辑标签：1.引用label；2.获取label中的属性（右侧栏上有，鼠标停留会显示代码）\n引用：可以将左侧栏的laber拖拽到脚本中，通过.text来获取text属性\n也可以用这种方法改变其他的东西，如颜色\n有一个叫modulate的属性，可以用来修改立绘和UI的颜色（右侧栏-CanvasItem-Visibility-Modulate）\n1 2 3 func _ready() -\u0026gt; void: $Label.text = \u0026#34;Hello, World!\u0026#34; $Label.modulate = Color.GREEN Input 项目-项目设置-输入映射\n在此可以添加动作，动作允许我们将键位绑定到某些事件上\n命名并添加动作，点击加号输入需要绑定的键位\n在脚本中，需要创建一个输入函数，输入func _input回车，会自动补全\n这个函数会在每次游戏接收任何输入时调用。需要检查触发输入的事件是否是我们按下的操作：\nif event.is_action_pressed():括号会弹出可选的目标动作\n假设操作对象是label，需要在按键时将其颜色改为红色，则引用label，\n$Label.modulate = Color.RED\n检查动作何时结束\nif event.is_action_released():\n利用相同的代码将颜色改回绿色\n$Label.modulate = Color.GREEN\nVariables 1.0 变量：保存信息的容器\n例如使用变量保存玩家角色的信息\n将默认血量设置为100\nvar health = 100\n然后可以在_ready()函数中打印这个变量\nprint(health)\n可以对血量进行计算\n1 2 3 4 5 6 health = 40 health = 20+30 health += 20 health -= 10 health *= 4 health /= 2 写一个每次按键减少血量的脚本 1 2 3 4 5 6 7 8 extends Node var health: int = 100 func _input(event: InputEvent) -\u0026gt; void: if event.is_action_pressed(\u0026#34;my_action\u0026#34;): health -= 10 print(\u0026#34;Health: %d\u0026#34; % health) If-statements（条件语句） if语句检测一个条件是否被满足\n可以用if语句对变量做出反应，如希望玩家在血量为0时死亡\n1 2 3 if health \u0026lt;= 0: health = 0 print(\u0026#34;Game Over\u0026#34;) 此代码中使用if health \u0026lt;= 0:将血量与0比较。\n其他的比较还有：\nx == y 等于\nx \u0026gt; y 大于\nx \u0026gt;= y 大于等于\nx != y 不等于\nx \u0026lt; y 小于\nx \u0026lt;= y 小于等于\n可以使用and关键词添加另一个条件并确保两者都需要满足\n使用or确保只需要满足其中之一条件\nif x == y or y \u0026gt; z\n还可以使用else关键词来定义当条件不满足时发生什么\n1 2 else: print(\u0026#34;You are still alive\u0026#34;) 用elif合并else和if语句 1 2 3 4 5 6 7 if health \u0026lt;= 0: health = 0 print(\u0026#34;Game Over\u0026#34;) elif health \u0026lt; 50: print(\u0026#34;Warning: Low Health\u0026#34;) else: print(\u0026#34;You are still alive\u0026#34;) Comments 在一行的上方或后方对代码进行注释\n# This is a comment\n可以通过在代码前面加\u0026quot;#\u0026ldquo;暂时删除部分代码的执行\n编程规范：如果注释掉的是代码的话，不要在\u0026rdquo;#\u0026ldquo;后加空格\n#print()\n可以选择多行代码，右键单击切换注释（godot内有效，vs code没找到这个功能）\n但：不能有一个完全空白的函数，需要添加关键字pass避免报错\nVariables 2.0 创建和声明变量时，需要考虑在哪里这样做\n如果在if语句内部声明一个变量，就只能在该if语句里使用该变量。这叫做SCOPE（范围）\n如果希望在脚本的各个地方都能读取变量，应该将其放在代码的顶部，在任何函数之外 1 2 3 4 5 6 extends Node var script_variable = 100 func _ready(): var ready _variable = 100 gdscript的优点：可以声明变量而无需考虑数据类型 1 2 3 var godot_is_cool = true var coolness = 9001 coolness = true DATA TYPES 在gdscript中，有四种经典数据类型：\nBoolean/bool（布尔变量）：表示true和false\ninteger/int：表示整数\nfloat：表示小数\nstring（字符串）：表示文字\n从一种类型转为另一种类型：casting（类型转换）\n1 2 3 var number =42 var text = \u0026#34;Meaning of Life: \u0026#34; + str(number) print(text) 通过str()将其转化为字符串，输出：Meaning of Life: 42\n1 2 var pi = 3.14 print(int(pi)) 将小数输出为整数。需要注意的是它只是去掉了小数点后的数字，不会进行四舍五入。\n两种常见数据结构：Vector2和Vector3\nVector2存储两个浮点数：x和y，\nVector3存储三个浮点数：x和y和z 1 2 3 var position = Vector3(3, -10, 5) position.x += 2 print(position) 默认情况下，gdscript是动态类型，这意味着创建变量时，不需要定义它可以储存什么类型的数据\n然而，它也更容易出现错误，并且它的性能低于静态类型\n但gdscript允许我们定义变量的类型\nvar damage: int = 15 也可以通过写:= 15来让godot自动确认数据类型，这称为推断类型，得出的结果是一样的，godot意识到15是个整数，于是将变量设置为int\n这也意味着该变量不能更改为其他类型。如果尝试将其设置为一个字符串， 1 2 3 4 var damage := 15 func _ready(): damage = \u0026#34;A lot!\u0026#34; 将会报错。\n在变量前添加@export可以将其暴露在检查器里。\n@export var damage := 15\n保存代码并点击左侧栏的节点（Node）,可以在右侧栏检查器中设置变量 如果print(damage)，可以看到通过检查器设置的值会在游戏中更新。可以按小圆圈恢复到默认值\nconstant（常量）：定义一个不想改变的变量\nconst GRAVITY = -9.81\n使用大写字母表示常量。\n常量不能被改写，否则会报错 Functions 函数是编程的基础，它们允许您将代码捆绑在可重复利用的packages\nfunc _ready() func _input() 下划线表明这些函数不是由我们激活或调用的，而是由引擎本身\n在godot中，可以创建自己的函数\nfunc jump() func die() func shoot() func respawn()\n开始创建一个函数\n1 2 3 4 5 func jump(): #添加向上的力 #播放声音 #播放跳跃动画 print(\u0026#34;JUMP!\u0026#34;) 为了不让每次按下空格就调用这个函数，于是在前面写input函数：\n1 2 3 4 5 6 7 8 9 func _input(event): if event.is_action_pressed(): jump() func jump(): #添加向上的力 #播放声音 #播放跳跃动画 print(\u0026#34;JUMP!\u0026#34;) 在代码中，我们将给函数的输入称为参数（parameters），将输出称为返回值（returns）\n创建一个将两个数字相加的函数func add():，在括号中添加参数func add(num1, num2):。在函数中，我们可以将它们加在一起并将它们储存在一个叫result的变量中\n1 2 3 func add(num1, num2): var result = num1 + num2 print(result) 可以在ready函数中调用add()：\n1 2 func _ready(): add(3, 5) 运行后会打印出8。\n但该函数目前并不返回结果，只是打印结果。为了在ready函数访问并调用add函数的结果，我们将add函数的print替换为return。 1 2 3 4 5 6 7 func add(num1, num2): var result = num1 + num2 return(result) func _ready(): var result = add(5, 10) print(result) 利用return还可以做更多的事： 1 2 3 4 5 6 7 8 func add(num1, num2): var result = num1 + num2 return(result) func _ready(): var result = add(5, 10) result = add(result, 10) print(result) 打印25。\n和声明变量时一样，也可以定义函数的参数和返回类型\nfunc add(num1: int, num2: int) -\u0026gt; int:\n使用箭头-\u0026gt;来设置返回值类型 Random numbers 函数randf给出0-1之间的随机数，非常适合为代码分配概率。（抽卡） 1 2 3 4 5 6 7 8 func _ready(): var roll = randf() if roll \u0026lt;= 0.8: print(\u0026#34;Common item\u0026#34;) elif roll \u0026lt;= 0.95: print(\u0026#34;Rare item\u0026#34;) else: print(\u0026#34;Legendary item\u0026#34;) (真的没问题吗用这个代码抽了十次出了四次rare )\n（试着结合目前学的写了个按下按键抽卡的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 extends Node var roll: float = 0.0 var item_type: String = \u0026#34;\u0026#34; func _input(event: InputEvent) -\u0026gt; void: if event.is_action_pressed(\u0026#34;my_action\u0026#34;): roll = randf() if roll \u0026lt;= 0.8: item_type = \u0026#34;Common item\u0026#34; elif roll \u0026lt;= 0.95: item_type = \u0026#34;Rare item\u0026#34; else: item_type = \u0026#34;Legendary item\u0026#34; print(item_type) 还可以使用randf_range()和randi_range()来得到一个指定范围内的随机整数或小数\n比如给角色随机生成身高可以用 1 2 var character_height = randi_range(140, 210) print(\u0026#34;Your character is \u0026#34; + str(character_height) + \u0026#34;cm tall.\u0026#34;) GD的官方文档和编辑器是连着的。\n这意味着按住ctrl并单击代码中想要了解更多信息的内容，它会在编辑器中直接打开官方文档 未完待续\n","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/gd-script%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0brackeys/","title":"GD Script教程笔记|Brackeys"},{"content":"谢谢莱特雷的Hugo+Github部署博客教程 谢谢网友们让我觉得应该把开博客作为互联网生涯的一个选项（？\n谢谢gpt老师 deepseek老师\n总之我终于可以开启博客生涯耶耶耶 ","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E6%88%90%E7%AB%8B%E5%8D%9A%E5%AE%A2/","title":"成立博客"},{"content":"测试文章：高级编程技巧与实践指南 目录 测试文章：高级编程技巧与实践指南 目录 引言 环境配置 项目结构 核心模块设计 数据模型定义 API接口设计 数据库操作 业务逻辑实现 错误处理机制 性能优化策略 安全防护措施 测试用例编写 部署配置 监控与日志 总结与展望 附录 代码示例 -- coding: utf-8 -- 配置日志 数据库配置 Redis配置 安全配置 监控指标 SQLAlchemy 模型 Pydantic 模型 依赖注入 工具函数 业务逻辑类 FastAPI 应用 中间件 API路由 启动应用 引言 本文旨在展示一个完整的企业级应用开发示例，包含复杂的代码结构和最佳实践。\n环境配置 项目结构 核心模块设计 数据模型定义 API接口设计 数据库操作 业务逻辑实现 错误处理机制 性能优化策略 安全防护措施 测试用例编写 部署配置 监控与日志 总结与展望 附录 代码示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; 高级企业级应用示例 这是一个复杂的Python应用程序，展示了多种编程技术和设计模式 \u0026#34;\u0026#34;\u0026#34; import asyncio import json import logging from abc import ABC, abstractmethod from dataclasses import dataclass, field from datetime import datetime, timedelta from enum import Enum from typing import List, Dict, Optional, Union, Any, Callable, Coroutine from contextlib import asynccontextmanager import aiohttp import redis.asyncio as redis from pydantic import BaseModel, ValidationError, validator from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, ForeignKey, Boolean, Float, JSON from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker, relationship, Session from sqlalchemy.exc import SQLAlchemyError from sqlalchemy.sql import select, update, delete, func import uvicorn from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Query, Path, status from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from fastapi.middleware.cors import CORSMiddleware from fastapi.responses import JSONResponse import jwt from passlib.context import CryptContext import httpx from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST import psutil import os # 配置日志 logging.basicConfig( level=logging.INFO, format=\u0026#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s\u0026#39;, handlers=[ logging.FileHandler(\u0026#39;app.log\u0026#39;), logging.StreamHandler() ] ) logger = logging.getLogger(__name__) # 数据库配置 DATABASE_URL = \u0026#34;postgresql+psycopg2://user:password@localhost:5432/mydatabase\u0026#34; engine = create_engine(DATABASE_URL, pool_pre_ping=True, pool_recycle=3600) SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) Base = declarative_base() # Redis配置 REDIS_URL = \u0026#34;redis://localhost:6379\u0026#34; redis_pool = redis.ConnectionPool.from_url(REDIS_URL) # 安全配置 SECRET_KEY = \u0026#34;your-secret-key-here-make-it-very-long-and-secure\u0026#34; ALGORITHM = \u0026#34;HS256\u0026#34; ACCESS_TOKEN_EXPIRE_MINUTES = 30 pwd_context = CryptContext(schemes=[\u0026#34;bcrypt\u0026#34;], deprecated=\u0026#34;auto\u0026#34;) security = HTTPBearer() # 监控指标 REQUEST_COUNT = Counter(\u0026#39;request_count\u0026#39;, \u0026#39;App Request Count\u0026#39;, [\u0026#39;method\u0026#39;, \u0026#39;endpoint\u0026#39;, \u0026#39;http_status\u0026#39;]) REQUEST_LATENCY = Histogram(\u0026#39;request_latency_seconds\u0026#39;, \u0026#39;Request latency\u0026#39;, [\u0026#39;endpoint\u0026#39;]) class UserRole(str, Enum): ADMIN = \u0026#34;admin\u0026#34; USER = \u0026#34;user\u0026#34; MODERATOR = \u0026#34;moderator\u0026#34; class UserStatus(str, Enum): ACTIVE = \u0026#34;active\u0026#34; INACTIVE = \u0026#34;inactive\u0026#34; SUSPENDED = \u0026#34;suspended\u0026#34; # SQLAlchemy 模型 class User(Base): __tablename__ = \u0026#34;users\u0026#34; id = Column(Integer, primary_key=True, index=True) username = Column(String(50), unique=True, index=True, nullable=False) email = Column(String(100), unique=True, index=True, nullable=False) hashed_password = Column(String(255), nullable=False) full_name = Column(String(100)) role = Column(String(20), default=UserRole.USER) status = Column(String(20), default=UserStatus.ACTIVE) created_at = Column(DateTime, default=datetime.utcnow) updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow) last_login = Column(DateTime) # 关系 posts = relationship(\u0026#34;Post\u0026#34;, back_populates=\u0026#34;author\u0026#34;) comments = relationship(\u0026#34;Comment\u0026#34;, back_populates=\u0026#34;author\u0026#34;) class Post(Base): __tablename__ = \u0026#34;posts\u0026#34; id = Column(Integer, primary_key=True, index=True) title = Column(String(200), nullable=False) content = Column(Text, nullable=False) summary = Column(String(500)) slug = Column(String(200), unique=True, index=True) is_published = Column(Boolean, default=False) published_at = Column(DateTime) author_id = Column(Integer, ForeignKey(\u0026#34;users.id\u0026#34;)) created_at = Column(DateTime, default=datetime.utcnow) updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow) view_count = Column(Integer, default=0) like_count = Column(Integer, default=0) # 关系 author = relationship(\u0026#34;User\u0026#34;, back_populates=\u0026#34;posts\u0026#34;) comments = relationship(\u0026#34;Comment\u0026#34;, back_populates=\u0026#34;post\u0026#34;) tags = relationship(\u0026#34;Tag\u0026#34;, secondary=\u0026#34;post_tags\u0026#34;, back_populates=\u0026#34;posts\u0026#34;) class Comment(Base): __tablename__ = \u0026#34;comments\u0026#34; id = Column(Integer, primary_key=True, index=True) content = Column(Text, nullable=False) author_id = Column(Integer, ForeignKey(\u0026#34;users.id\u0026#34;)) post_id = Column(Integer, ForeignKey(\u0026#34;posts.id\u0026#34;)) parent_id = Column(Integer, ForeignKey(\u0026#34;comments.id\u0026#34;)) is_approved = Column(Boolean, default=False) created_at = Column(DateTime, default=datetime.utcnow) updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow) # 关系 author = relationship(\u0026#34;User\u0026#34;, back_populates=\u0026#34;comments\u0026#34;) post = relationship(\u0026#34;Post\u0026#34;, back_populates=\u0026#34;comments\u0026#34;) replies = relationship(\u0026#34;Comment\u0026#34;, backref=relationship(\u0026#34;parent\u0026#34;, remote_side=[id])) class Tag(Base): __tablename__ = \u0026#34;tags\u0026#34; id = Column(Integer, primary_key=True, index=True) name = Column(String(50), unique=True, nullable=False) slug = Column(String(50), unique=True, nullable=False) description = Column(String(200)) posts = relationship(\u0026#34;Post\u0026#34;, secondary=\u0026#34;post_tags\u0026#34;, back_populates=\u0026#34;tags\u0026#34;) class PostTag(Base): __tablename__ = \u0026#34;post_tags\u0026#34; post_id = Column(Integer, ForeignKey(\u0026#34;posts.id\u0026#34;), primary_key=True) tag_id = Column(Integer, ForeignKey(\u0026#34;tags.id\u0026#34;), primary_key=True) created_at = Column(DateTime, default=datetime.utcnow) # Pydantic 模型 class UserBase(BaseModel): username: str email: str full_name: Optional[str] = None role: UserRole = UserRole.USER class UserCreate(UserBase): password: str class UserUpdate(BaseModel): email: Optional[str] = None full_name: Optional[str] = None role: Optional[UserRole] = None class UserResponse(UserBase): id: int status: UserStatus created_at: datetime updated_at: datetime class Config: from_attributes = True class Token(BaseModel): access_token: str token_type: str expires_in: int class TokenData(BaseModel): username: Optional[str] = None user_id: Optional[int] = None class PostBase(BaseModel): title: str content: str summary: Optional[str] = None is_published: bool = False class PostCreate(PostBase): tags: List[str] = [] class PostUpdate(BaseModel): title: Optional[str] = None content: Optional[str] = None summary: Optional[str] = None is_published: Optional[bool] = None class PostResponse(PostBase): id: int slug: str author_id: int author: UserResponse published_at: Optional[datetime] created_at: datetime updated_at: datetime view_count: int like_count: int tags: List[str] class Config: from_attributes = True # 依赖注入 def get_db(): db = SessionLocal() try: yield db finally: db.close() async def get_redis(): redis_client = redis.Redis(connection_pool=redis_pool) try: yield redis_client finally: await redis_client.close() # 工具函数 def verify_password(plain_password, hashed_password): return pwd_context.verify(plain_password, hashed_password) def get_password_hash(password): return pwd_context.hash(password) def create_access_token(data: dict, expires_delta: Optional[timedelta] = None): to_encode = data.copy() if expires_delta: expire = datetime.utcnow() + expires_delta else: expire = datetime.utcnow() + timedelta(minutes=15) to_encode.update({\u0026#34;exp\u0026#34;: expire}) encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM) return encoded_jwt async def get_current_user( credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db) ): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\u0026#34;Could not validate credentials\u0026#34;, headers={\u0026#34;WWW-Authenticate\u0026#34;: \u0026#34;Bearer\u0026#34;}, ) try: payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=[ALGORITHM]) username: str = payload.get(\u0026#34;sub\u0026#34;) if username is None: raise credentials_exception token_data = TokenData(username=username) except jwt.JWTError: raise credentials_exception user = db.query(User).filter(User.username == token_data.username).first() if user is None: raise credentials_exception return user async def get_current_active_user(current_user: User = Depends(get_current_user)): if current_user.status != UserStatus.ACTIVE: raise HTTPException(status_code=400, detail=\u0026#34;Inactive user\u0026#34;) return current_user # 业务逻辑类 class UserService: def __init__(self, db: Session): self.db = db def create_user(self, user_create: UserCreate) -\u0026gt; User: # 检查用户是否存在 if self.db.query(User).filter(User.username == user_create.username).first(): raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\u0026#34;Username already registered\u0026#34; ) if self.db.query(User).filter(User.email == user_create.email).first(): raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\u0026#34;Email already registered\u0026#34; ) hashed_password = get_password_hash(user_create.password) db_user = User( username=user_create.username, email=user_create.email, hashed_password=hashed_password, full_name=user_create.full_name, role=user_create.role ) self.db.add(db_user) self.db.commit() self.db.refresh(db_user) return db_user def get_user_by_id(self, user_id: int) -\u0026gt; Optional[User]: return self.db.query(User).filter(User.id == user_id).first() def update_user(self, user_id: int, user_update: UserUpdate) -\u0026gt; Optional[User]: db_user = self.get_user_by_id(user_id) if not db_user: return None update_data = user_update.dict(exclude_unset=True) for field, value in update_data.items(): setattr(db_user, field, value) db_user.updated_at = datetime.utcnow() self.db.commit() self.db.refresh(db_user) return db_user class PostService: def __init__(self, db: Session, redis_client: redis.Redis): self.db = db self.redis = redis_client def create_slug(self, title: str) -\u0026gt; str: # 简单的slug生成逻辑 slug = title.lower().replace(\u0026#39; \u0026#39;, \u0026#39;-\u0026#39;) slug = \u0026#39;\u0026#39;.join(c for c in slug if c.isalnum() or c == \u0026#39;-\u0026#39;) # 检查slug是否唯一 counter = 1 original_slug = slug while self.db.query(Post).filter(Post.slug == slug).first(): slug = f\u0026#34;{original_slug}-{counter}\u0026#34; counter += 1 return slug def create_post(self, post_create: PostCreate, author_id: int) -\u0026gt; Post: slug = self.create_slug(post_create.title) db_post = Post( title=post_create.title, content=post_create.content, summary=post_create.summary, slug=slug, is_published=post_create.is_published, author_id=author_id ) if post_create.is_published: db_post.published_at = datetime.utcnow() # 处理标签 for tag_name in post_create.tags: tag = self.db.query(Tag).filter(Tag.name == tag_name).first() if not tag: tag_slug = tag_name.lower().replace(\u0026#39; \u0026#39;, \u0026#39;-\u0026#39;) tag = Tag(name=tag_name, slug=tag_slug) self.db.add(tag) self.db.flush() post_tag = PostTag(post_id=db_post.id, tag_id=tag.id) self.db.add(post_tag) self.db.add(db_post) self.db.commit() self.db.refresh(db_post) return db_post async def increment_view_count(self, post_id: int): # 使用Redis进行视图计数，定期同步到数据库 redis_key = f\u0026#34;post:views:{post_id}\u0026#34; await self.redis.incr(redis_key) # 如果计数达到阈值，同步到数据库 current_views = int(await self.redis.get(redis_key) or 0) if current_views % 10 == 0: # 每10次视图同步一次 self.db.query(Post).filter(Post.id == post_id).update( {\u0026#34;view_count\u0026#34;: Post.view_count + current_views} ) self.db.commit() await self.redis.set(redis_key, 0) # FastAPI 应用 app = FastAPI( title=\u0026#34;高级博客API\u0026#34;, description=\u0026#34;一个功能完整的博客系统API\u0026#34;, version=\u0026#34;1.0.0\u0026#34;, docs_url=\u0026#34;/docs\u0026#34;, redoc_url=\u0026#34;/redoc\u0026#34; ) # 中间件 app.add_middleware( CORSMiddleware, allow_origins=[\u0026#34;http://localhost:3000\u0026#34;, \u0026#34;https://example.com\u0026#34;], allow_credentials=True, allow_methods=[\u0026#34;*\u0026#34;], allow_headers=[\u0026#34;*\u0026#34;], ) # API路由 @app.post(\u0026#34;/auth/register\u0026#34;, response_model=UserResponse) def register( user_create: UserCreate, db: Session = Depends(get_db) ): user_service = UserService(db) return user_service.create_user(user_create) @app.post(\u0026#34;/auth/login\u0026#34;, response_model=Token) def login( username: str, password: str, db: Session = Depends(get_db) ): user = db.query(User).filter(User.username == username).first() if not user or not verify_password(password, user.hashed_password): raise HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\u0026#34;Incorrect username or password\u0026#34; ) access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES) access_token = create_access_token( data={\u0026#34;sub\u0026#34;: user.username}, expires_delta=access_token_expires ) # 更新最后登录时间 user.last_login = datetime.utcnow() db.commit() return Token( access_token=access_token, token_type=\u0026#34;bearer\u0026#34;, expires_in=ACCESS_TOKEN_EXPIRE_MINUTES * 60 ) @app.post(\u0026#34;/posts\u0026#34;, response_model=PostResponse) def create_post( post_create: PostCreate, current_user: User = Depends(get_current_active_user), db: Session = Depends(get_db), redis_client: redis.Redis = Depends(get_redis) ): post_service = PostService(db, redis_client) return post_service.create_post(post_create, current_user.id) @app.get(\u0026#34;/posts/{post_slug}\u0026#34;, response_model=PostResponse) async def get_post( post_slug: str = Path(..., description=\u0026#34;文章的slug\u0026#34;), db: Session = Depends(get_db), redis_client: redis.Redis = Depends(get_redis) ): post = db.query(Post).filter(Post.slug == post_slug).first() if not post: raise HTTPException(status_code=404, detail=\u0026#34;Post not found\u0026#34;) # 异步增加视图计数 post_service = PostService(db, redis_client) asyncio.create_task(post_service.increment_view_count(post.id)) return post @app.get(\u0026#34;/metrics\u0026#34;) def metrics(): return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST) # 启动应用 if __name__ == \u0026#34;__main__\u0026#34;: # 创建数据库表 Base.metadata.create_all(bind=engine) uvicorn.run( \u0026#34;main:app\u0026#34;, host=\u0026#34;0.0.0.0\u0026#34;, port=8000, reload=True, log_level=\u0026#34;info\u0026#34; ) ","date":"2024-01-15T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E6%B5%8B%E8%AF%95/","title":"测试"}]