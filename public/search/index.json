[{"content":"本文基于Stack版本3.31.0，部分代码使用AI完成\n从Neopost到Stack 我觉得对于像我这样的代码白痴，一开始装修博客就去选冷门主题真的是走弯路了。用Neopost主题的时候遇到很多问题用搜索引擎都搜不到可以抄作业的答案，只能一个劲问ai然后一遍一遍试错……\n虽然看到博客一点一点有个样子了也比较有满足感，但是太折磨了，思来想去还是换了更多人用教程也更全的Stack主题。\n在此感谢： 莱特雷-Hugo Stack主题自定义更改 ； 树响集-Stack主题调整 ； 第三夏尔-Hugo Stack博客主题装修 ； Naive Koala-Hugo Stack 魔改美化 B1ain\u0026rsquo;s Blog-hugo博客装修笔记 顺便截图纪念一下用Neopost主题时候的样子吧。展开图片 从默认字体到猫啃糖圆 没啥好说的，星屑同款字体，圆体的神,\n附上字体网站链接 背景图和头像 因为还是很喜欢原来做的像素动图风格，本打算沿用，但在Pintrest找了一晚上素材都没有找到很满意的背景图\n自己画了一下草图，先凑合用着吧（画不画完还是未知数）\n画不来像素风所以整个风格都改了\u0026gt; \u0026lt; 画布开得尽可能大了，姑且应用到网页上看看会多么影响加载速度（\n切换与旋转效果 按照教程 添加了头像旋转效果，并加了浅色/暗色模式切换头像和背景图的功能，效果不错（就是图太草了）\n以下是我魔改的代码：\n暗色模式下头像旋转（主题目录\\assets\\scss\\custom.scss）\r1// 头像旋转动画 2[data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo { 3 transition: transform 1.65s ease-in-out; // 旋转时间 4} 5 6[data-scheme=\u0026#34;dark\u0026#34;] .sidebar header .site-avatar .site-logo:hover { 7 transform: rotate(360deg); // 旋转角度为360度 8} 切换背景图片（主题目录\\layouts\\partials\\footer\\custom.html）\r1 /*修改背景图片*/ 2 [data-scheme=\u0026#34;light\u0026#34;] body { 3 background: url({{ (resources.Get \u0026#34;background/light.jpg\u0026#34;).Permalink }}) no-repeat center top; 4 background-size: cover; 5 background-attachment: fixed; 6 } 7 [data-scheme=\u0026#34;dark\u0026#34;] body { 8 background: url({{ (resources.Get \u0026#34;background/dark.jpg\u0026#34;).Permalink }}) no-repeat center top; 9 background-size: cover; 10 background-attachment: fixed; 11 } 切换头像\r先修改主题目录\\layouts\\partials\\head\\custom.html\n1\u0026lt;script\u0026gt; 2// 头像切换功能 3function updateAvatar() { 4 const avatarImg = document.querySelector(\u0026#39;.site-avatar .site-logo\u0026#39;); 5 if (!avatarImg) return; 6 7 const isDark = document.documentElement.getAttribute(\u0026#39;data-scheme\u0026#39;) === \u0026#39;dark\u0026#39;; 8 const lightSrc = avatarImg.getAttribute(\u0026#39;data-src-light\u0026#39;) || avatarImg.src; 9 const darkSrc = avatarImg.getAttribute(\u0026#39;data-src-dark\u0026#39;); 10 11 if (darkSrc \u0026amp;\u0026amp; isDark) { 12 avatarImg.src = darkSrc; 13 } else if (lightSrc \u0026amp;\u0026amp; !isDark) { 14 avatarImg.src = lightSrc; 15 } 16} 17 18// 初始化 19document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, updateAvatar); 20 21// 监听主题切换 22new MutationObserver(function(mutations) { 23 mutations.forEach(function(mutation) { 24 if (mutation.attributeName === \u0026#39;data-scheme\u0026#39;) { 25 setTimeout(updateAvatar, 50); 26 } 27 }); 28}).observe(document.documentElement, { attributes: true }); 29\u0026lt;/script\u0026gt; 再修改主题目录\\layouts\\partials\\sidebar\\left.html（在\u0026lt;header\u0026gt;后修改，注释掉原有设置）\n1\u0026lt;header\u0026gt; 2 {{ with .Site.Params.sidebar.avatar }} 3 {{ if (default true .enabled) }} 4 \u0026lt;figure class=\u0026#34;site-avatar\u0026#34;\u0026gt; 5 \u0026lt;a href=\u0026#34;{{ .Site.BaseURL | relLangURL }}\u0026#34;\u0026gt; 6 {{ if not .local }} 7 \u0026lt;img src=\u0026#34;{{ .src }}\u0026#34; width=\u0026#34;300\u0026#34; height=\u0026#34;300\u0026#34; class=\u0026#34;site-logo\u0026#34; loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;Avatar\u0026#34; 8 {{ with .srcDark }}data-src-dark=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; 9 {{ else }} 10 {{ $avatar := resources.Get (.src) }} 11 {{ $avatarDark := resources.Get (.srcDark | default .src) }} 12 13 {{ if and $avatar $avatarDark }} 14 {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} 15 {{ $avatarDarkResized := $avatarDark.Resize \u0026#34;300x\u0026#34; }} 16 \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 17 data-src-light=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 18 data-src-dark=\u0026#34;{{ $avatarDarkResized.RelPermalink }}\u0026#34; 19 width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; 20 height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; 21 class=\u0026#34;site-logo\u0026#34; 22 loading=\u0026#34;lazy\u0026#34; 23 alt=\u0026#34;Avatar\u0026#34;\u0026gt; 24 {{ else if $avatar }} 25 {{ $avatarResized := $avatar.Resize \u0026#34;300x\u0026#34; }} 26 \u0026lt;img src=\u0026#34;{{ $avatarResized.RelPermalink }}\u0026#34; 27 width=\u0026#34;{{ $avatarResized.Width }}\u0026#34; 28 height=\u0026#34;{{ $avatarResized.Height }}\u0026#34; 29 class=\u0026#34;site-logo\u0026#34; 30 loading=\u0026#34;lazy\u0026#34; 31 alt=\u0026#34;Avatar\u0026#34;\u0026gt; 32 {{ else }} 33 {{ errorf \u0026#34;Failed loading avatar from %q\u0026#34; . }} 34 {{ end }} 35 {{ end }} 36 \u0026lt;/a\u0026gt; 37 {{ with $.Site.Params.sidebar.emoji }} 38 \u0026lt;span class=\u0026#34;emoji\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; 39 {{ end }} 40 \u0026lt;/figure\u0026gt; 41 {{ end }} 42 {{ end }} 再在hugo.yaml的sidebar里面添加srcdark: img/dark.jpg\n1 sidebar: 2 emoji: 😨 3 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. 4 avatar: 5 enabled: true 6 local: true 7 src: img/light.jpg 8 srcdark: img/dark.jpg 顺说目前的回顶部按钮和鼠标光标是用neopost主题的时候自己画的，我很满意^ ^\n不过考虑到风格不匹配大概还要重画一个……\n更换头像下图标链接 苦于没找到合适的图标素材，自己摸索了一个可以制作出完美适配主题下其他现有图标的办法\n先看我做好的图标： （这样看起来两个线条粗细不太一致，我也没找到原因，但没关系，最终显示效果是差不多的就行……如果有谁知道为什么，请务必告诉我）\n如果有同款需要，可以直接右键上面的图标另存^ ^\n寻找svg素材 这里有一个很全的资源网站：维基共享资源 搜索你需要的logo，比如“bluesky”，选择图像-文件类型-svg，选择合适的logo并在下载时选择full resolution，这样我们就能得到一张初始的svg文件：\n展开图像\r编辑svg文件 使用编辑工具对svg文件进行编辑，这里我用的是一个免费的在线svg编辑工具（需要注册） 主要需要做的是先把view box调到24x24像素，再把图像调整到view box范围内，四周适当留出2px左右的空白（视具体图像而定），之后就可以保存了\n展开图像 把保存的svg文件在VScode里打开，默认会显示图像预览，需要在右上角找到作为源文本重新打开按钮，查看源文本\n为了跟主题原有的图标协调，这里我同时打开了主题目录\\assets\\icons\\brand-twitter.svg的源文本进行比对：\nbrand-twitter.svg\r1\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-twitter\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; 2 \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; 3 \u0026lt;path d=\u0026#34;M22 4.01c-1 .49 -1.98 .689 -3 .99c-1.121 -1.265 -2.783 -1.335 -4.38 -.737s-2.643 2.06 -2.62 3.737v1c-3.245 .083 -6.135 -1.395 -8 -4c0 0 -4.182 7.433 4 11c-1.872 1.247 -3.739 2.088 -6 2c3.308 1.803 6.913 2.423 10.034 1.517c3.58 -1.04 6.522 -3.723 7.651 -7.742a13.84 13.84 0 0 0 .497 -3.753c-.002 -.249 1.51 -2.772 1.818 -4.013z\u0026#34; /\u0026gt; 4\u0026lt;/svg\u0026gt; 可以直接复制前面两行代码粘贴到正在修改的svg文件中：\n未编辑的svg文件源文本\r1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; 2\u0026lt;svg width=\u0026#34;24px\u0026#34; height=\u0026#34;24px\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; 3 \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; fill=\u0026#34;#000\u0026#34;/\u0026gt; 4\u0026lt;/svg\u0026gt; 注意删除正在修改的文件\u0026lt;path\u0026gt;末尾的样式（如style=\u0026quot;\u0026quot;、fill=\u0026quot;\u0026quot;、stroke=\u0026quot;\u0026quot;等等，总之只保留前面一连串看不懂的数字）\n编辑后的源文本\r1\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon icon-tabler icon-tabler-brand-bluesky\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke=\u0026#34;currentColor\u0026#34; fill=\u0026#34;none\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34;\u0026gt; 2 \u0026lt;path stroke=\u0026#34;none\u0026#34; d=\u0026#34;M0 0h24v24H0z\u0026#34; fill=\u0026#34;none\u0026#34;/\u0026gt; 3 \u0026lt;path d=\u0026#34;M 6.307 4.451 C 8.615 6.202 11.099 9.759 12.012 11.668 C 12.923 9.76 15.407 6.202 17.717 4.451 C 19.383 3.185 22.083 2.207 22.083 5.321 C 22.083 5.944 21.73 10.549 21.524 11.294 C 20.804 13.893 18.184 14.557 15.854 14.155 C 19.928 14.858 20.964 17.179 18.726 19.501 C 14.477 23.912 12.618 18.395 12.14 16.981 C 12.054 16.722 12.012 16.6 12.012 16.703 C 12.012 16.6 11.97 16.722 11.882 16.981 C 11.407 18.395 9.547 23.912 5.297 19.501 C 3.059 17.179 4.095 14.858 8.17 14.155 C 5.837 14.557 3.219 13.893 2.499 11.294 C 2.294 10.549 1.94 5.944 1.94 5.321 C 1.94 2.207 4.64 3.185 6.307 4.451 Z\u0026#34; style=\u0026#34;transform-box: fill-box; transform-origin: 50% 50%;\u0026#34; /\u0026gt; 4\u0026lt;/svg\u0026gt; 这样一个适配主题的svg图标就做好了。\n应用到主页 把做好的文件放到主题目录\\assets\\icons\\中，并在hugo/yaml里修改menu-social-icon的设置（与文件的标题一致），这样就可以应用到博客页面上了\n如果需要更改图标链接的顺序，在params:前面一行添加weight: 数字即可，数字越小则越前\n添加文章封面渐变效果 参考了田八-使用CSS让图片透明渐变 中第三种方法的代码。\n效果预览\r将以下代码添加到custom.scss中即可：\n1//文章预览图渐变 2.article-image { 3 img { 4 mask: linear-gradient(to bottom, black 0%, black 25%, rgba(0, 0, 0, 0.8) 40%, rgba(0, 0, 0, 0.4) 70%, transparent 100%); } 5} 为元素添加鼠标悬停效果 代码是什么，可以吃吗？ 先说题外话， 装修过程中渐渐学会了用开发者工具、定位css文件中的元素位置、简单修改悬停效果和添加动画……这之前我真是一窍不通\n我是小白，所以把这个过程分享出来，希望能帮助到跟我小白程度一样的人吧。\n我一开始还是各种问ai，但ai给出的方案实际上也是它海量检索资料然后缝合的，如果提问的方式不正确，它很难给出跟实际情况适配的答案。\n遇到问题时还是先谷歌搜寻一下，比如我想要上面提到的文章封面渐变效果，先用搜索引擎搜索“CSS 图片渐变”，找到了别人分享的实际内容，再去问ai是否可以应用到我的案例上、如果我需要为透明度添加中间值应该怎么做。这样可以提升效率，而不是在ai给出的海量错误代码中迷失。\n学会使用开发者工具检查元素，查看元素的class属性。\n用vscode的资源管理器打开主题文件夹，再在style.scss给出的文件列表里一个一个ctrl+F查找该属性，这样就能很快锁定这个元素的样式代码。\n通常建议不要直接在原文件上进行修改，应该在custom.scss中添加代码。\n案例：左侧菜单栏悬停效果 以下是实现左侧菜单栏悬停效果的具体案例：\n用F12定位元素属性\n选择左侧菜单栏中的元素，可以很清楚地看到class=\u0026quot;menu\u0026quot; id=\u0026quot;main-menu\u0026quot;\n查找元素的样式代码\n可以在menu.scss中找到#main-menu关键词，以下是它相关的所有样式代码\n1/* Menu style */ 2#main-menu { 3 list-style: none; 4 overflow-y: auto; 5 flex-grow: 1; 6 font-size: 1.4rem; 7 background-color: var(--card-background); 8 9 box-shadow: var(--shadow-l1); 10 display: none; 11 margin: 0 calc(var(--container-padding) * -1); 12 13 padding: 30px 30px; 14 15 @include respond(xl) { 16 padding: 15px 0; 17 } 18 19 \u0026amp;, .menu-bottom-section ol { 20 flex-direction: column; 21 gap: 30px; 22 23 @include respond(xl) { 24 gap: 25px; 25 } 26 } 27 28 \u0026amp;.show { 29 display: flex; 30 } 31 32 @include respond(md) { 33 align-items: flex-end; 34 display: flex; 35 background-color: transparent; 36 padding: 0; 37 box-shadow: none; 38 margin: 0; 39 } 40 41 li { 42 position: relative; 43 vertical-align: middle; 44 padding: 0; 45 46 @include respond(md) { 47 width: 100%; 48 } 49 50 svg { 51 stroke: currentColor; 52 stroke-width: 1.33; 53 width: 20px; 54 height: 20px; 55 } 56 57 a { 58 height: 100%; 59 display: inline-flex; 60 align-items: center; 61 color: var(--body-text-color); 62 gap: var(--menu-icon-separation); 63 } 64 65 span { 66 flex: 1; 67 } 68 69 \u0026amp;.current { 70 a { 71 color: var(--accent-color); 72 font-weight: bold; 73 } 74 } 75 76 \u0026amp;.menu-bottom-section { 77 margin-top: auto; 78 79 ol { 80 display: flex; 81 padding-left: 0; 82 } 83 } 84 } 85} 在custom.scss中添加样式\n这是我为实现左侧菜单栏悬停后变色并加粗放大和添加阴影效果（并做暗色模式区分）而写的代码： 1#main-menu { //左边菜单 2 li { 3 \u0026amp;:hover a{ 4 transition: all 0.2s ease-in-out; 5 color: var(--light-red); 6 transform: scale(1.05); 7 font-weight: bold; 8 filter: drop-shadow(var(--dropshadow-light)); 9 } 10 11 [data-scheme=\u0026#34;dark\u0026#34;] \u0026amp; { 12 \u0026amp;:hover { 13 filter: drop-shadow(var(--dropshadow-dark)); 14 } 15 } 16 } 17} 对于像我这样的小白来说，写悬停效果只需要学会写:hover（悬停状态）、transition（动画效果）、transform（变形）这些很简单的代码，并学会看原样式代码的层级结构就可以了。\n如果写的代码效果与预期不一致，或者报错，此时再把已经写好的代码和原本的样式代码贴给ai让它进行修改，比什么都不做就茫然地向ai求助更有效率。\n我为我的博客写了一大堆悬停效果，因为它最简单也最容易提升博客阅读体验。（当然，移动端看不了鼠标悬停效果= = 全部的代码就不放出了，总之基本上都是重复上述案例的步骤，不同的元素根据它原有样式的不同可能会有差分\n如果需要实现复杂的功能效果，可能需要编辑layouts/partials/footer/custon.html这个文件，这就涉及我知识盲区了\u0026gt; \u0026lt; 页码栏鼠标悬停效果 因为有点复杂，java部分借助了ai\n效果预览： 这个效果拆分为：\n当前页码高亮（stack自带） 鼠标悬停在非当前页码时高亮（会写上面的代码就会写这个），同时当前页码变回默认样式 鼠标悬停在当前页码时不发生改变 实现这一效果的代码：\n编辑custom.scss 1.page-link { //页面页码栏（需要添加JavaScript代码实现当前页高亮） 2 transition: all 0.2s ease-in-out; 3 4 \u0026amp;.current.reset-style { 5 font-weight: normal; 6 background-color: var(--card-background); 7 color: var(--card-text-color-secondary); 8 } 9 \u0026amp;:not(.current):hover { // 其他页面的悬停效果 10 color: var(--light-red); 11 background-color: var(--card-background-selected); 12 transform: scale(1.05); 13 font-weight: bold; 14 } 15} 编辑custom.html 1\u0026lt;script\u0026gt; 2/* 页码栏分页悬停效果 */ 3document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { 4 const pagination = document.querySelector(\u0026#39;.pagination\u0026#39;); 5 const pageLinks = document.querySelectorAll(\u0026#39;.page-link\u0026#39;); 6 let currentPage = document.querySelector(\u0026#39;.page-link.current\u0026#39;); 7 8 pageLinks.forEach(link =\u0026gt; { 9 link.addEventListener(\u0026#39;mouseenter\u0026#39;, function() { 10 // 如果悬停的不是当前页面 11 if (!this.classList.contains(\u0026#39;current\u0026#39;) \u0026amp;\u0026amp; currentPage) { 12 currentPage.classList.add(\u0026#39;reset-style\u0026#39;); 13 } 14 }); 15 16 link.addEventListener(\u0026#39;mouseleave\u0026#39;, function() { 17 // 恢复当前页面样式 18 if (currentPage) { 19 currentPage.classList.remove(\u0026#39;reset-style\u0026#39;); 20 } 21 }); 22 }); 23}); 24\u0026lt;/script\u0026gt; 更改主页文章卡片可点击区域 Stack主题中，主页的文章卡片的默认点击区域只有文章标题区域，\n以下这些代码可以把点击打开文章的区域更改为除分类标签以外的所有区域。\n在custom.html中添加：\n1\u0026lt;!-- 扩大主页文章卡片可点击区域 --\u0026gt; 2\u0026lt;script\u0026gt; 3document.addEventListener(\u0026#39;click\u0026#39;, function(e) { 4 const articleDetails = e.target.closest(\u0026#39;.article-details\u0026#39;); 5 if (articleDetails \u0026amp;\u0026amp; !e.target.closest(\u0026#39;.article-category a\u0026#39;)) { 6 const titleLink = articleDetails.querySelector(\u0026#39;.article-title a\u0026#39;); 7 if (titleLink) { 8 window.location.href = titleLink.href; 9 } 10 } 11}); 12\u0026lt;/script\u0026gt; 在custom.scss中添加：\n1//扩大主页文章卡片可点击区域(java)，同步更改鼠标光标样式 2.article-details { 3 cursor: url(\u0026#39;/mouse/pointer.png\u0026#39;), pointer; 4} 如果没有自定义鼠标样式，去掉url的部分就好了。\n未完待续？\n","date":"2025-10-01T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E4%BD%A0%E5%A5%BDstack%E4%B8%BB%E9%A2%98/","title":"你好，Stack主题"},{"content":"对照Brackeys的教程做的个人学习笔记\n本来写在星屑页面上，但觉得搭个博客来写会更好阅读一些，于是就搭了这个博客（？饺子醋）\nYouTube的Brackeys频道 B站搬运熟肉 Hello, World！ func _ready()\n节点第一次进入场景时会调用此函数。可以在此放置需要游戏运行时立刻执行的代码。 pass\n意味着什么都不做，出现在尚未填写的函数中 print(\u0026quot;Hello, World!\u0026quot;)\n控制台会打印输入的信息\ngdscript使用tab缩进来确定代码的结构，并对大小写敏感\nModifying nodes 1.0 调整字体大小：右侧栏-control-theme overrides-font sizes\n通过脚本来编辑标签：1.引用label；2.获取label中的属性（右侧栏上有，鼠标停留会显示代码）\n引用：可以将左侧栏的laber拖拽到脚本中，通过.text来获取text属性\n也可以用这种方法改变其他的东西，如颜色\n有一个叫modulate的属性，可以用来修改立绘和UI的颜色（右侧栏-CanvasItem-Visibility-Modulate）\n1func _ready() -\u0026gt; void: 2\t$Label.text = \u0026#34;Hello, World!\u0026#34; 3\t$Label.modulate = Color.GREEN Input 项目-项目设置-输入映射\n在此可以添加动作，动作允许我们将键位绑定到某些事件上\n命名并添加动作，点击加号输入需要绑定的键位\n在脚本中，需要创建一个输入函数，输入func _input回车，会自动补全\n这个函数会在每次游戏接收任何输入时调用。需要检查触发输入的事件是否是我们按下的操作：\nif event.is_action_pressed():括号会弹出可选的目标动作\n假设操作对象是label，需要在按键时将其颜色改为红色，则引用label，\n$Label.modulate = Color.RED\n检查动作何时结束\nif event.is_action_released():\n利用相同的代码将颜色改回绿色\n$Label.modulate = Color.GREEN\nVariables 1.0 变量：保存信息的容器\n例如使用变量保存玩家角色的信息\n将默认血量设置为100\nvar health = 100\n然后可以在_ready()函数中打印这个变量\nprint(health)\n可以对血量进行计算\n1health = 40 2health = 20+30 3health += 20 4health -= 10 5health *= 4 6health /= 2 写一个每次按键减少血量的脚本 1extends Node 2 3var health: int = 100 4 5func _input(event: InputEvent) -\u0026gt; void: 6\tif event.is_action_pressed(\u0026#34;my_action\u0026#34;): 7\thealth -= 10 8\tprint(\u0026#34;Health: %d\u0026#34; % health) If-statements（条件语句） if语句检测一个条件是否被满足\n可以用if语句对变量做出反应，如希望玩家在血量为0时死亡\n1if health \u0026lt;= 0: 2\thealth = 0 3\tprint(\u0026#34;Game Over\u0026#34;) 此代码中使用if health \u0026lt;= 0:将血量与0比较。\n其他的比较还有：\nx == y 等于\nx \u0026gt; y 大于\nx \u0026gt;= y 大于等于\nx != y 不等于\nx \u0026lt; y 小于\nx \u0026lt;= y 小于等于\n可以使用and关键词添加另一个条件并确保两者都需要满足\n使用or确保只需要满足其中之一条件\nif x == y or y \u0026gt; z\n还可以使用else关键词来定义当条件不满足时发生什么\n1else: 2\tprint(\u0026#34;You are still alive\u0026#34;) 用elif合并else和if语句 1if health \u0026lt;= 0: 2\thealth = 0 3\tprint(\u0026#34;Game Over\u0026#34;) 4elif health \u0026lt; 50: 5\tprint(\u0026#34;Warning: Low Health\u0026#34;) 6else: 7\tprint(\u0026#34;You are still alive\u0026#34;) Comments 在一行的上方或后方对代码进行注释\n# This is a comment\n可以通过在代码前面加\u0026quot;#\u0026ldquo;暂时删除部分代码的执行\n编程规范：如果注释掉的是代码的话，不要在\u0026rdquo;#\u0026ldquo;后加空格\n#print()\n可以选择多行代码，右键单击切换注释（godot内有效，vs code没找到这个功能）\n但：不能有一个完全空白的函数，需要添加关键字pass避免报错\nVariables 2.0 创建和声明变量时，需要考虑在哪里这样做\n如果在if语句内部声明一个变量，就只能在该if语句里使用该变量。这叫做SCOPE（范围）\n如果希望在脚本的各个地方都能读取变量，应该将其放在代码的顶部，在任何函数之外 1extends Node 2 3var script_variable = 100 4 5func _ready(): 6\tvar ready _variable = 100 gdscript的优点：可以声明变量而无需考虑数据类型 1var godot_is_cool = true 2var coolness = 9001 3coolness = true DATA TYPES 在gdscript中，有四种经典数据类型：\nBoolean/bool（布尔变量）：表示true和false\ninteger/int：表示整数\nfloat：表示小数\nstring（字符串）：表示文字\n从一种类型转为另一种类型：casting（类型转换）\n1var number =42 2var text = \u0026#34;Meaning of Life: \u0026#34; + str(number) 3print(text) 通过str()将其转化为字符串，输出：Meaning of Life: 42\n1var pi = 3.14 2print(int(pi)) 将小数输出为整数。需要注意的是它只是去掉了小数点后的数字，不会进行四舍五入。\n两种常见数据结构：Vector2和Vector3\nVector2存储两个浮点数：x和y，\nVector3存储三个浮点数：x和y和z 1var position = Vector3(3, -10, 5) 2position.x += 2 3print(position) 默认情况下，gdscript是动态类型，这意味着创建变量时，不需要定义它可以储存什么类型的数据\n然而，它也更容易出现错误，并且它的性能低于静态类型\n但gdscript允许我们定义变量的类型\nvar damage: int = 15 也可以通过写:= 15来让godot自动确认数据类型，这称为推断类型，得出的结果是一样的，godot意识到15是个整数，于是将变量设置为int\n这也意味着该变量不能更改为其他类型。如果尝试将其设置为一个字符串， 1var damage := 15 2 3func _ready(): 4\tdamage = \u0026#34;A lot!\u0026#34; 将会报错。\n在变量前添加@export可以将其暴露在检查器里。\n@export var damage := 15\n保存代码并点击左侧栏的节点（Node）,可以在右侧栏检查器中设置变量 如果print(damage)，可以看到通过检查器设置的值会在游戏中更新。可以按小圆圈恢复到默认值\nconstant（常量）：定义一个不想改变的变量\nconst GRAVITY = -9.81\n使用大写字母表示常量。\n常量不能被改写，否则会报错 Functions 函数是编程的基础，它们允许您将代码捆绑在可重复利用的packages\nfunc _ready() func _input() 下划线表明这些函数不是由我们激活或调用的，而是由引擎本身\n在godot中，可以创建自己的函数\nfunc jump() func die() func shoot() func respawn()\n开始创建一个函数\n1func jump(): 2\t#添加向上的力 3\t#播放声音 4\t#播放跳跃动画 5\tprint(\u0026#34;JUMP!\u0026#34;) 为了不让每次按下空格就调用这个函数，于是在前面写input函数：\n1func _input(event): 2\tif event.is_action_pressed(): 3\tjump() 4 5func jump(): 6\t#添加向上的力 7\t#播放声音 8\t#播放跳跃动画 9\tprint(\u0026#34;JUMP!\u0026#34;) 在代码中，我们将给函数的输入称为参数（parameters），将输出称为返回值（returns）\n创建一个将两个数字相加的函数func add():，在括号中添加参数func add(num1, num2):。在函数中，我们可以将它们加在一起并将它们储存在一个叫result的变量中\n1func add(num1, num2): 2\tvar result = num1 + num2 3\tprint(result) 可以在ready函数中调用add()：\n1func _ready(): 2\tadd(3, 5) 运行后会打印出8。\n但该函数目前并不返回结果，只是打印结果。为了在ready函数访问并调用add函数的结果，我们将add函数的print替换为return。 1func add(num1, num2): 2\tvar result = num1 + num2 3\treturn(result) 4 5func _ready(): 6\tvar result = add(5, 10) 7\tprint(result) 利用return还可以做更多的事： 1func add(num1, num2): 2\tvar result = num1 + num2 3\treturn(result) 4 5func _ready(): 6\tvar result = add(5, 10) 7\tresult = add(result, 10) 8\tprint(result) 打印25。\n和声明变量时一样，也可以定义函数的参数和返回类型\nfunc add(num1: int, num2: int) -\u0026gt; int:\n使用箭头-\u0026gt;来设置返回值类型 Random numbers 函数randf给出0-1之间的随机数，非常适合为代码分配概率。（抽卡） 1func _ready(): 2\tvar roll = randf() 3\tif roll \u0026lt;= 0.8: 4\tprint(\u0026#34;Common item\u0026#34;) 5\telif roll \u0026lt;= 0.95: 6\tprint(\u0026#34;Rare item\u0026#34;) 7\telse: 8\tprint(\u0026#34;Legendary item\u0026#34;) (真的没问题吗用这个代码抽了十次出了四次rare )\n（试着结合目前学的写了个按下按键抽卡的代码： 1extends Node 2 3var roll: float = 0.0 4var item_type: String = \u0026#34;\u0026#34; 5 6func _input(event: InputEvent) -\u0026gt; void: 7\tif event.is_action_pressed(\u0026#34;my_action\u0026#34;): 8\troll = randf() 9\tif roll \u0026lt;= 0.8: 10\titem_type = \u0026#34;Common item\u0026#34; 11\telif roll \u0026lt;= 0.95: 12\titem_type = \u0026#34;Rare item\u0026#34; 13\telse: 14\titem_type = \u0026#34;Legendary item\u0026#34; 15\tprint(item_type) 还可以使用randf_range()和randi_range()来得到一个指定范围内的随机整数或小数\n比如给角色随机生成身高可以用 1var character_height = randi_range(140, 210) 2print(\u0026#34;Your character is \u0026#34; + str(character_height) + \u0026#34;cm tall.\u0026#34;) GD的官方文档和编辑器是连着的。\n这意味着按住ctrl并单击代码中想要了解更多信息的内容，它会在编辑器中直接打开官方文档 未完待续\n","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/gd-script%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0brackeys/","title":"GD Script教程笔记|Brackeys"},{"content":"谢谢莱特雷的Hugo+Github部署博客教程 谢谢网友们让我觉得应该把开博客作为互联网生涯的一个选项（？\n谢谢gpt老师 deepseek老师\n总之我终于可以开启博客生涯耶耶耶 ","date":"2025-09-23T00:00:00Z","permalink":"https://ryihuan.github.io/p/%E6%88%90%E7%AB%8B%E5%8D%9A%E5%AE%A2/","title":"成立博客"}]